name: Reusable - Common

on:
  workflow_call:
    inputs:
      cache-read-only:
        type: boolean
        required: false
      no-build-cache:
        type: boolean
        required: false
      skip-windows-smoke-tests:
        type: boolean
        required: false
    secrets:
      GRADLE_ENTERPRISE_ACCESS_KEY:
        required: false
      GE_CACHE_USERNAME:
        required: false
      GE_CACHE_PASSWORD:
        required: false

jobs:
  spotless:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK for running Gradle
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      - name: Spotless
        uses: gradle/gradle-build-action@v2
        env:
          GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}
          GE_CACHE_USERNAME: ${{ secrets.GE_CACHE_USERNAME }}
          GE_CACHE_PASSWORD: ${{ secrets.GE_CACHE_PASSWORD }}
        with:
          arguments: spotlessCheck ${{ inputs.no-build-cache && '--no-build-cache' || '' }}
          cache-read-only: ${{ inputs.cache-read-only }}
          # gradle enterprise is used for the build cache
          gradle-home-cache-excludes: caches/build-cache-1

  gradle-wrapper-validation:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: gradle/wrapper-validation-action@v1.0.6

  license-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK for running Gradle
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      - name: Generate license report
        uses: gradle/gradle-build-action@v2
        env:
          GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}
          GE_CACHE_USERNAME: ${{ secrets.GE_CACHE_USERNAME }}
          GE_CACHE_PASSWORD: ${{ secrets.GE_CACHE_PASSWORD }}
        with:
          # currently ignoring inputs.no-build-cache and always running with --no-build-cache
          # see https://github.com/jk1/Gradle-License-Report/issues/231
          arguments: generateLicenseReport --no-build-cache
          cache-read-only: ${{ inputs.cache-read-only }}
          # gradle enterprise is used for the build cache
          gradle-home-cache-excludes: caches/build-cache-1

      - name: Check licenses
        run: |
          # add any untracked folders that may have been added by generateLicenseReport
          git add licenses
          # there's always going to one line difference due to the timestamp included in the report
          if [[ $(git diff --cached --shortstat licenses) == " 1 file changed, 1 insertion(+), 1 deletion(-)" ]]
          then
            echo "Licenses are up-to-date."
          else
            echo "Licenses are not up-to-date, please run './gradlew generateLicenseReport' locally and commit."
            echo
            echo "$(git diff --cached --stat licenses)"
            echo
            echo "$(git diff --cached licenses)"
            exit 1
          fi

  assemble:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK for running Gradle
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      - name: Assemble
        uses: gradle/gradle-build-action@v2
        env:
          GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}
          GE_CACHE_USERNAME: ${{ secrets.GE_CACHE_USERNAME }}
          GE_CACHE_PASSWORD: ${{ secrets.GE_CACHE_PASSWORD }}
        with:
          # javadoc task fails sporadically fetching https://docs.oracle.com/javase/8/docs/api/
          arguments: assemble -x javadoc ${{ inputs.no-build-cache && '--no-build-cache' || '' }}
          cache-read-only: ${{ inputs.cache-read-only }}
          # gradle enterprise is used for the build cache
          gradle-home-cache-excludes: caches/build-cache-1

      - name: Check for jApiCmp diffs
        run: |
          if git diff --quiet
          then
            echo "No diff detected."
          else
            echo "Diff detected - did you run './gradlew jApiCmp'?"
            echo $(git diff --name-only)
            echo $(git diff)
            exit 1
          fi

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-java-version:
          - 8
          - 11
          - 17
          - 19
        vm:
          - hotspot
          - openj9
        exclude:
          - test-java-version: 19
            vm: openj9
      fail-fast: false
    steps:
      - uses: actions/checkout@v3

      - id: setup-test-java
        name: Set up JDK ${{ matrix.test-java-version }}-${{ matrix.vm }} for running tests
        uses: actions/setup-java@v3
        with:
          # using zulu because new releases get published quickly
          distribution: ${{ matrix.vm == 'hotspot' && 'zulu' || 'adopt-openj9'}}
          java-version: ${{ matrix.test-java-version }}

      - name: Set up JDK for running Gradle
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      # vaadin tests use pnpm
      - name: Cache pnpm modules
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-test-cache-pnpm-modules

      - name: Start deadlock detector
        run: .github/scripts/deadlock-detector.sh

      - name: Test
        env:
          GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}
          GE_CACHE_USERNAME: ${{ secrets.GE_CACHE_USERNAME }}
          GE_CACHE_PASSWORD: ${{ secrets.GE_CACHE_PASSWORD }}
        uses: gradle/gradle-build-action@v2
        with:
          # spotless is checked separately since it's a common source of failure
          arguments: >
            check
            -x spotlessCheck
            -PtestJavaVersion=${{ matrix.test-java-version }}
            -PtestJavaVM=${{ matrix.vm }}
            -Porg.gradle.java.installations.paths=${{ steps.setup-test-java.outputs.path }}
            -Porg.gradle.java.installations.auto-download=false
            ${{ inputs.no-build-cache && ' --no-build-cache' || '' }}
          # only push cache for one matrix option since github action cache space is limited
          cache-read-only: ${{ inputs.cache-read-only || matrix.test-java-version != 11 || matrix.vm != 'hotspot' }}
          # gradle enterprise is used for the build cache
          gradle-home-cache-excludes: caches/build-cache-1

      - name: Upload deadlock detector artifacts if any
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: deadlock-detector-test-${{ matrix.test-java-version }}-${{ matrix.vm }}
          path: /tmp/deadlock-detector-*
          if-no-files-found: ignore

      - name: Upload jvm crash dump files if any
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: javacore-test-${{ matrix.test-java-version }}
          path: |
            **/hs_err_pid*.log
            **/javacore.*.txt
            **/Snap.*.trc
            **/core.*.dmp
            **/jitdump.*.dmp
          if-no-files-found: ignore

  smoke-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - windows-2019
          - ubuntu-latest
        smoke-test-suite:
          - jetty
          - liberty
          - payara
          - tomcat
          - tomee
          - websphere
          - wildfly
          - other
        exclude:
          - os: ${{ inputs.skip-windows-smoke-tests && 'windows-2019' || '' }}
          - os: windows-2019
            smoke-test-suite: websphere
      fail-fast: false
    steps:
      - name: Support long paths
        run: git config --system core.longpaths true
        if: matrix.os == 'windows-2019'

      - uses: actions/checkout@v3

      - name: Set up JDK for running Gradle
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      - name: Set up Gradle cache
        uses: gradle/gradle-build-action@v2
        with:
          # only push cache for one matrix option per OS since github action cache space is limited
          cache-read-only: ${{ inputs.cache-read-only || matrix.smoke-test-suite != 'tomcat' }}
          # gradle enterprise is used for the build cache
          gradle-home-cache-excludes: caches/build-cache-1

      - name: Build
        env:
          GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}
          GE_CACHE_USERNAME: ${{ secrets.GE_CACHE_USERNAME }}
          GE_CACHE_PASSWORD: ${{ secrets.GE_CACHE_PASSWORD }}
        # running suite "none" compiles everything needed by smoke tests without executing any tests
        run: ./gradlew :smoke-tests:test -PsmokeTestSuite=none --no-daemon ${{ inputs.no-build-cache && ' --no-build-cache' || '' }}

      - name: Test
        env:
          GRADLE_ENTERPRISE_ACCESS_KEY: ${{ secrets.GRADLE_ENTERPRISE_ACCESS_KEY }}
          GE_CACHE_USERNAME: ${{ secrets.GE_CACHE_USERNAME }}
          GE_CACHE_PASSWORD: ${{ secrets.GE_CACHE_PASSWORD }}
        run: ./gradlew :smoke-tests:test -PsmokeTestSuite=${{ matrix.smoke-test-suite }}${{ inputs.no-build-cache && ' --no-build-cache' || '' }}

      - name: Upload jvm crash dump files if any
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: javacore-smoke-test-${{ matrix.smoke-test-suite }}-${{ matrix.os }}
          # we expect crash dumps either in root director or in smoke-tests
          # not using **/ here because actions/upload-artifact fails with long paths https://github.com/actions/upload-artifact/issues/309
          path: |
            hs_err_pid*.log
            smoke-tests/hs_err_pid*.log
            javacore.*.txt
            smoke-tests/javacore.*.txt
            Snap.*.trc
            smoke-tests/Snap.*.trc
            core.*.dmp
            smoke-tests/core.*.dmp
            jitdump.*.dmp
            smoke-tests/jitdump.*.dmp
          if-no-files-found: ignore

  gradle-plugins:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 11 for running Gradle
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 11

      - name: Build
        uses: gradle/gradle-build-action@v2
        with:
          arguments: build ${{ inputs.no-build-cache && '--no-build-cache' || '' }}
          build-root-directory: gradle-plugins
          cache-read-only: ${{ inputs.cache-read-only }}

  examples:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK for running Gradle
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      - name: Set up Gradle cache
        uses: gradle/gradle-build-action@v2
        with:
          cache-read-only: ${{ inputs.cache-read-only }}

      - name: Local publish of artifacts
        # javadoc task fails sporadically fetching https://docs.oracle.com/javase/8/docs/api/
        run: ./gradlew publishToMavenLocal -x javadoc

      - name: Local publish of gradle plugins
        # javadoc task fails sporadically fetching https://docs.oracle.com/javase/8/docs/api/
        run: ./gradlew publishToMavenLocal -x javadoc
        working-directory: gradle-plugins

      - name: Build distro
        run: ./gradlew build --init-script ../../.github/scripts/local.init.gradle.kts${{ inputs.no-build-cache && ' --no-build-cache' || '' }}
        working-directory: examples/distro

      - name: Build extension
        run: ./gradlew build --init-script ../../.github/scripts/local.init.gradle.kts${{ inputs.no-build-cache && ' --no-build-cache' || '' }}
        working-directory: examples/extension

      - name: Run muzzle check against extension
        run: ./gradlew muzzle --init-script ../../.github/scripts/local.init.gradle.kts
        working-directory: examples/extension
